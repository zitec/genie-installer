#!/usr/bin/env bash

# Verify operating system is supported
UNAMEOUT="$(uname -s)"
case "${UNAMEOUT}" in
    Linux*)             MACHINE=linux;;
    Darwin*)            MACHINE=mac;;
    *)                  MACHINE="UNKNOWN"
esac

# Determine if stdout is a terminal
if test -t 1; then

    # Determine if colors are supported
    ncolors=$(tput colors)

    if test -n "$ncolors" && test "$ncolors" -ge 8; then
        BOLD="$(tput bold)"
        RED="$(tput setaf 1)"
        GREEN="$(tput setaf 2)"
        YELLOW="$(tput setaf 3)"
        BLUE="$(tput setaf 4)"
        PINK="$(tput setaf 5)"
        CYAN="$(tput setaf 6)"
        GREY="$(tput setaf 8)"
        NC="$(tput sgr0)"
    fi
fi

# Function that reads user input and outputs it
read_input () {
  read -p "${CYAN}$1${NC} " -r
  echo $REPLY
}

# Function that blocks script until user confirms
confirm_continue () {
  read -p "${CYAN}$1${NC} [Y/N]: " -n 1 -r
  echo  # move to a new line
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      exit 1
  fi
}

# Function that outputs supplied string with a new line at the end
out_line () {
  printf "%s\n" "$1"
}

# Function that outputs supplied string in header style
out_step () {
  printf "${PINK}+------------------------------------------------+\n" "$1"
  printf "| %-40s %s |\n" "$1" "$2"
  printf "+------------------------------------------------+\n${NC}" "$1"
}

# Function that outputs supplied string in error style
out_err () {
  printf "${RED}Error:${NC} %s\n" "$1"
}

# Function that outputs supplied string in requirement style
out_req () {
  if [ "$2" = true ]; then
    printf "${GREEN}%-30s ✓${NC}\n" "$1"
  else
    printf "${RED}%-30s 𐄂${NC}\n" "$1"
  fi
}

# Function that displays the welcome message
display_welcome () {

  clear

  out_step "Ginie Installer" "1 / 4"
  out_line
  out_line "This wizard is going to help you setup Ginie on your system."
  out_line "It will ask for your confirmation before performing any local changes."
  out_line

  confirm_continue "Would you like to continue?"
}

# Function that checks for all requirements
check_requirements() {

  clear

  out_step "Requirements Check" "2 / 4"
  out_line
  
  out_line "Performing check..."
  out_line

  local HAS_REQUIREMENTS=true
  local IS_GENIE_INSTALLED=false
  local IS_NODE_INSTALLED=false
  local NODE_VERSION_REQUIRED=16

  # Check if Node is installed
  which node &> /dev/null
  if [ "$?" -eq 0 ]; then

    # Check if Node has minimum version
    local NODE_VERSION_OUT="$(node --version)"
    local NODE_VERSION_INSTALLED="${NODE_VERSION_OUT:1:2}"
    if [ "$NODE_VERSION_INSTALLED" -ge "$NODE_VERSION_REQUIRED" ]; then
      IS_NODE_INSTALLED=true
    else
      HAS_REQUIREMENTS=false
    fi

  else
    HAS_REQUIREMENTS=false
  fi

  # Check if Genie is already installed
  which genie &> /dev/null
  if [ "$?" -eq 0 ]; then
    IS_GENIE_INSTALLED=true
    HAS_REQUIREMENTS=false
  fi
  
  out_req "Node.js (>= v$NODE_VERSION_REQUIRED)" "$IS_NODE_INSTALLED"
  out_line

  if [ "$HAS_REQUIREMENTS" = false ]; then

    if [ "$IS_GENIE_INSTALLED" = true ]; then

      out_line "It seems that you already have Genie installed on your local system."
      out_line "If you wish to update it to the latest version please run ${CYAN}genie update${NC}."
      out_line

    fi

    if [ "$IS_NODE_INSTALLED" = false ]; then

      out_line "It looks like you either don't have Node.js installed or you are using an older version."
      out_line "Please install or update Node.js following the guide below and then try again."

      if [ "$MACHINE" = 'linux' ]; then
        out_line "› ${GREY}https://github.com/nodesource/distributions#installation-instructions${NC}"
      elif [ "$MACHINE" = 'mac' ]; then 
        out_line "› ${GREY}https://brew.sh${NC}"
        out_line "› ${GREY}https://formulae.brew.sh/formula/node${NC}"
      fi
      out_line

    fi

    out_err "Some of the requirements are missing."

    exit 1
  fi

  # Check if we need to elevate privileges
  local NPM_PREFIX=$(npm config get prefix)
  if [ ! -w "$NPM_PREFIX" ]; then

    out_line "Wizard requires root password to continue."
    out_line

    sudo date > /dev/null

    IS_ROOT_USER=true

  else
    IS_ROOT_USER=false
  fi

  out_line "Your system meets all the necessary requirements."
  out_line
  confirm_continue "Would you like to continue?"
}

# Function that sets up the Gitlab token
setup_token () {

  clear

  out_step "Gitlab Token" "3 / 4"
  out_line

  out_line "Generate a new token with ${CYAN}read_api${NC} scope and paste it down below."
  out_line
  out_line "This link will take you directly to Gitlab's Access Token page:"
  out_line "› ${GREY}https://gitlab.zitec.com/-/profile/personal_access_tokens${NC}"
  out_line

  local GITLAB_TOKEN=$(read_input "Token:")
  out_line

  out_line "Updating ${CYAN}~/.npmrc${NC} with the following changes:"
  out_line
  out_line "${GREY}@research:registry=https://gitlab.zitec.com/api/v4/packages/npm/"
  out_line "//gitlab.zitec.com/api/v4/packages/npm/:_authToken=*****${NC}"

  out_line
  confirm_continue "Would you like to continue?"

  # Check if we need root
  if [ "$IS_ROOT_USER" = false ]; then
    npm config set -- //gitlab.zitec.com/api/v4/packages/npm/:_authToken=${GITLAB_TOKEN}
    npm config set @research:registry https://gitlab.zitec.com/api/v4/packages/npm/
  else
    sudo npm config set -- //gitlab.zitec.com/api/v4/packages/npm/:_authToken=${GITLAB_TOKEN}
    sudo npm config set @research:registry https://gitlab.zitec.com/api/v4/packages/npm/
  fi
}

# Function that installs Node.js packages
install_packages () {

  clear

  out_step "Install Packages" "4 / 4"
  out_line

  out_line "Installing Node.js packages:"
  out_line
  out_line "› ${GREY}@research/genie${NC}"

  out_line
  confirm_continue "Would you like to continue?"

  # Check if we need root
  if [ "$IS_ROOT_USER" = false ]; then
    npm install -g --no-progress @research/genie > /dev/null
  else
    sudo npm install -g --no-progress @research/genie > /dev/null && \
    sudo chmod 0755 "$(npm config get prefix)/bin/genie"
  fi

  if [ "$?" -eq 0 ]; then
    out_line
    out_line "${GREEN}Genie installed successfully!${NC}"
    out_line
  fi
}

# Function that starts the script
main () {

  display_welcome

  check_requirements

  setup_token

  install_packages
}

main